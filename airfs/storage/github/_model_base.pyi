from collections.abc import Mapping
from typing import Any, ClassVar, Dict, Optional, Set, Tuple, Type, Union

class GithubObject(Mapping):
    STRUCT: Union[Dict[str, Union[Dict, Type[GithubObject]]], Type[GithubObject]] = ...
    KEY: ClassVar[Union[str, None]] = ...
    GET: ClassVar[str] = ...
    HEAD: ClassVar[str] = ...
    HEAD_KEYS: ClassVar[Set[str]] = ...
    HEAD_EXTRA: ClassVar[Tuple[Union[str, Tuple[str, Tuple[str, ...]]], ...]] = ...
    HEAD_FROM: ClassVar[Union[Set[str], Dict[str, Type[GithubObject]]]] = ...
    LIST: ClassVar[str] = ...
    LIST_KEY: ClassVar[str] = ...
    SYMLINK: ClassVar[str] = ...
    def __init__(
        self,
        client: Any,
        spec: Any,
        headers: Optional[Any] = ...,
        name: Optional[Any] = ...,
    ) -> None: ...
    def __getitem__(self, key: Any): ...
    def __iter__(self) -> Any: ...
    def __len__(self): ...
    @classmethod
    def next_model(cls, spec: Any): ...
    @classmethod
    def list(cls, client: Any, spec: Any) -> None: ...
    @classmethod
    def head_obj(cls, client: Any, spec: Any): ...
    @classmethod
    def head(cls, client: Any, spec: Any, headers: Optional[Any] = ...): ...
    @classmethod
    def get_url(cls, client: Any, spec: Any): ...
    @classmethod
    def set_header(cls, response: Any): ...
    @classmethod
    def read_link(cls, client: Any, spec: Any): ...
